[
  {
    "severity": "HIGH",
    "category": "Command Execution",
    "rule": "CMD_INJECTION",
    "file": "samples/js/app.js",
    "line": 12,
    "message": "Possible Command Injection via child_process.exec()",
    "snippet": "child_process.exec('ls ' + req.query.dir); // command injection",
    "suggestion": "Use safer spawn with arg arrays; validate/whitelist inputs.",
    "detected_by": "Regex"
  },
  {
    "severity": "HIGH",
    "category": "Dangerous Function",
    "rule": "CODE_INJECTION",
    "file": "samples/js/app.js",
    "line": 17,
    "message": "Possible Code Injection via eval()",
    "snippet": "eval(req.query.code); // code injection",
    "suggestion": "Avoid eval(); use JSON.parse or predefined function maps.",
    "detected_by": "Regex"
  },
  {
    "severity": "HIGH",
    "category": "SQL Injection",
    "rule": "SQLI",
    "file": "samples/js/app.js",
    "line": 22,
    "message": "Possible SQL Injection: query built with string concatenation.",
    "snippet": "const sql = \"SELECT * FROM users WHERE name = '\" + req.query.name + \"'\"; // SQLi",
    "suggestion": "Use parameterized queries or ORM to avoid injection.",
    "detected_by": "Regex"
  },
  {
    "severity": "HIGH",
    "category": "Cross-Site Scripting",
    "rule": "XSS",
    "file": "samples/js/app.js",
    "line": 28,
    "message": "Possible DOM-based XSS via innerHTML assignment.",
    "snippet": "document.body.innerHTML = req.query.html; // XSS in client-side route (demo)",
    "suggestion": "Use textContent instead of innerHTML; sanitize/encode inputs.",
    "detected_by": "Regex"
  },
  {
    "severity": "MEDIUM",
    "category": "Weak Cryptography",
    "rule": "MD5",
    "file": "samples/js/app.js",
    "line": 7,
    "message": "Use of weak hash algorithm MD5",
    "snippet": "const h = crypto.createHash('md5').update(req.query.q || 'x').digest('hex');",
    "suggestion": "Use stronger algorithms (SHA-256, bcrypt, Argon2).",
    "detected_by": "Regex"
  },
  {
    "severity": "HIGH",
    "category": "Dangerous Function",
    "rule": "JS-EVAL-001",
    "file": "samples/js/app.js",
    "line": 17,
    "message": "Use of eval() can lead to code injection.",
    "snippet": "eval(...)",
    "suggestion": "Avoid eval(); use JSON.parse or predefined maps.",
    "detected_by": "AST"
  },
  {
    "severity": "HIGH",
    "category": "Cross-Site Scripting",
    "rule": "PHP_XSS",
    "file": "samples/php/index.php",
    "line": 8,
    "message": "Possible XSS in PHP by echoing untrusted input",
    "snippet": "echo $_GET['html']; // XSS",
    "suggestion": "Escape output using htmlspecialchars; validate inputs.",
    "detected_by": "Regex"
  },
  {
    "severity": "HIGH",
    "category": "Command Execution",
    "rule": "PHP_CMD",
    "file": "samples/php/index.php",
    "line": 13,
    "message": "Possible Command Injection in PHP via system/exec call.",
    "snippet": "system(\"ls \" . $_GET['cmd']); // command injection",
    "suggestion": "Avoid system/exec calls; use PHP built-in APIs with strict validation.",
    "detected_by": "Regex"
  },
  {
    "severity": "MEDIUM",
    "category": "Weak Cryptography",
    "rule": "PHP_MD5",
    "file": "samples/php/index.php",
    "line": 10,
    "message": "Use of weak hash algorithm MD5 in PHP.",
    "snippet": "$hash = md5($_GET['p']); // weak crypto",
    "suggestion": "Use password_hash() with bcrypt/Argon2 instead of MD5.",
    "detected_by": "Regex"
  },
  {
    "severity": "LOW",
    "category": "Error Handling",
    "rule": "PHP_ERROR",
    "file": "samples/php/index.php",
    "line": 19,
    "message": "Error information leakage in PHP via debug functions.",
    "snippet": "var_dump($e); // error leak",
    "suggestion": "Do not expose raw errors; log errors server-side and show generic messages.",
    "detected_by": "Regex"
  },
  {
    "severity": "HIGH",
    "category": "Command Execution",
    "rule": "PHP-SYSTEM-001",
    "file": "samples/php/index.php",
    "line": 13,
    "message": "Possible Command Injection in PHP via system().",
    "snippet": "system(...)",
    "suggestion": "Avoid system/exec calls; use PHP built-in APIs with strict input validation.",
    "detected_by": "AST"
  }
]