[
  {
    "id": "JS_CMD_INJECTION",
    "file": "samples/js/app.js",
    "line": 12,
    "severity": "high",
    "message": "Possible Command Injection via child_process",
    "description": "Command Injection: Using unsanitized input in child_process may allow arbitrary system command execution.",
    "action": "Avoid passing untrusted input to child_process. Use safe APIs or validate/escape inputs."
  },
  {
    "id": "JS_CODE_INJECTION",
    "file": "samples/js/app.js",
    "line": 17,
    "severity": "high",
    "message": "Possible Code Injection via eval()",
    "description": "Code Injection: eval() allows execution of arbitrary JavaScript, leading to remote code execution.",
    "action": "Avoid eval(). Use JSON.parse, Function constructors, or safer alternatives."
  },
  {
    "id": "JS_SQLI",
    "file": "samples/js/app.js",
    "line": 22,
    "severity": "high",
    "message": "Possible SQL Injection (JS: string concatenation in SQL queries)",
    "description": "SQL Injection: Concatenating user input directly into SQL queries makes the query vulnerable.",
    "action": "Use parameterized queries or ORM methods to safely handle inputs."
  },
  {
    "id": "JS_XSS",
    "file": "samples/js/app.js",
    "line": 28,
    "severity": "high",
    "message": "Possible DOM-based XSS via dangerous sink",
    "description": "DOM-based XSS: Writing untrusted input into the DOM (e.g., innerHTML) without sanitization allows script injection.",
    "action": "Use safe DOM APIs (e.g., textContent) or sanitize inputs before inserting."
  },
  {
    "id": "PHP_XSS",
    "file": "samples/php/index.php",
    "line": 8,
    "severity": "high",
    "message": "Possible XSS in PHP by echoing untrusted input",
    "description": "Cross-Site Scripting (XSS): Directly echoing untrusted input allows malicious JavaScript execution.",
    "action": "Escape output with htmlspecialchars() or use template engines with auto-escaping."
  },
  {
    "id": "PHP_CMD_INJECTION",
    "file": "samples/php/index.php",
    "line": 13,
    "severity": "high",
    "message": "Possible Command Injection in PHP",
    "description": "Command Injection: Passing untrusted input to system() or exec() may allow arbitrary command execution.",
    "action": "Avoid system/exec with raw input. Use escapeshellarg(), escapeshellcmd(), or safer alternatives."
  },
  {
    "id": "PHP_WEAK_HASH",
    "file": "samples/php/index.php",
    "line": 10,
    "severity": "medium",
    "message": "Use of weak hash algorithm (MD5)",
    "description": "Weak Hashing: MD5 is cryptographically broken and unsuitable for secure hashing.",
    "action": "Use SHA-256, SHA-3, or password hashing libraries like password_hash()."
  },
  {
    "id": "PHP_ERROR_LEAK",
    "file": "samples/php/index.php",
    "line": 19,
    "severity": "low",
    "message": "Error information leakage in PHP (stack trace exposure)",
    "description": "No detailed description available.",
    "action": "Review manually."
  }
]