[
  {
    "id": "JS-EVAL-TAINT-001",
    "file": "samples/js/app.js",
    "line": 20,
    "severity": "CRITICAL",
    "category": "Code Injection",
    "message": "Use of eval() can lead to code injection. | eval() detected via AST; allows arbitrary code execution. | eval() with user input \u2192 Remote Code Execution.",
    "suggestion": "Avoid eval(); use JSON.parse or pre-defined function maps. | Avoid eval(); use JSON.parse or predefined safe alternatives. | Avoid eval(); use JSON.parse or safe parsers.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "eval(req.query.code); // code injection",
    "detected_by": "AST+Regex"
  },
  {
    "id": "js-child-process-exec",
    "file": "samples/js/app.js",
    "line": 12,
    "severity": "CRITICAL",
    "category": "code-execution",
    "message": "Use of exec may allow command injection if input is not sanitized. | Use of child_process.exec() with user input may allow remote command execution.",
    "suggestion": "Use safer spawn with arg arrays; validate/whitelist inputs. | Use safer alternatives like execFile with strict input validation.",
    "owasp": "A03:2021 \u2013 Injection,A03:2021-Injection",
    "cwe": "",
    "snippet": "child_process.exec('ls ' + req.query.dir); // command injection",
    "detected_by": "Regex"
  },
  {
    "id": "JS-XSS-001",
    "file": "samples/js/app.js",
    "line": 31,
    "severity": "HIGH",
    "category": "Cross-Site Scripting",
    "message": "Possible DOM-based XSS via unsafe sink.",
    "suggestion": "Use textContent instead of innerHTML; sanitize/encode inputs.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "document.body.innerHTML = req.query.html; // XSS in client-side route (demo)",
    "detected_by": "Regex"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app.js",
    "line": 7,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "Weak hash algorithm used. | setTimeout called with a string \u2192 dynamic code execution like eval(). | setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Use SHA-256/512 or password hashing like bcrypt/argon2. | Pass a function reference instead of a string. | Pass a function reference instead of a string. | Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A02:2021-Cryptographic Failures,A03:2021-Injection",
    "cwe": "",
    "snippet": "const h = crypto.createHash('md5').update(req.query.q || 'x').digest('hex');",
    "detected_by": "AST+Regex"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app.js",
    "line": 1,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "const express = require('express');",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app.js",
    "line": 3,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "const crypto = require('crypto');",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app.js",
    "line": 4,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "const child_process = require('child_process');",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app.js",
    "line": 6,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "app.get('/hash', (req, res) => {",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app.js",
    "line": 11,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "app.get('/run', (req, res) => {",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app.js",
    "line": 13,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "res.send(\"ok\");",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app.js",
    "line": 19,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "app.get('/eval', (req, res) => {",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app.js",
    "line": 21,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "res.send(\"done\");",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app.js",
    "line": 24,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "app.get('/search', (req, res) => {",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app.js",
    "line": 27,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "res.send(\"searching\");",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app.js",
    "line": 30,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "app.get('/xss', (req, res) => {",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app.js",
    "line": 32,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "res.send(\"done\");",
    "detected_by": "AST"
  },
  {
    "id": "JS-CONSOLE-001",
    "file": "samples/js/app2.js",
    "line": 6,
    "severity": "LOW",
    "category": "Information Disclosure",
    "message": "Console logging detected",
    "suggestion": "Remove console statements in production.",
    "owasp": "A09:2021-Security Logging and Monitoring Failures",
    "cwe": "CWE-200",
    "snippet": "console.log(\"Admin section visible!\"); // BAD: client-side auth check",
    "detected_by": "Regex"
  },
  {
    "id": "JS-CONSOLE-001",
    "file": "samples/js/app2.js",
    "line": 32,
    "severity": "LOW",
    "category": "Information Disclosure",
    "message": "Console logging detected",
    "suggestion": "Remove console statements in production.",
    "owasp": "A09:2021-Security Logging and Monitoring Failures",
    "cwe": "CWE-200",
    "snippet": "console.log(\"Debug: reached end of app2.js\");*/",
    "detected_by": "Regex"
  },
  {
    "id": "JS-CLIENT-AUTH-001",
    "file": "samples/js/app2.js",
    "line": 5,
    "severity": "MEDIUM",
    "category": "Broken Access Control",
    "message": "Authorization logic found in client-side code. This can be bypassed.",
    "suggestion": "Do not rely on client-side authorization checks.",
    "owasp": "A01:2021-Broken Access Control",
    "cwe": "",
    "snippet": "if (user.role === \"admin\") {",
    "detected_by": "Regex"
  },
  {
    "id": "JS-DISABLE-CSP-001",
    "file": "samples/js/app2.js",
    "line": 13,
    "severity": "HIGH",
    "category": "Insecure Design",
    "message": "CSP with unsafe-inline detected. This weakens XSS protection.",
    "suggestion": "Avoid unsafe-inline; use nonces or hashes in CSP.",
    "owasp": "A04:2021-Insecure Design",
    "cwe": "",
    "snippet": "const cspHeader = \"Content-Security-Policy: default-src 'self' 'unsafe-inline'\";",
    "detected_by": "Regex"
  },
  {
    "id": "JS-JQUERY-OLD-001",
    "file": "samples/js/app2.js",
    "line": 19,
    "severity": "MEDIUM",
    "category": "Outdated Components",
    "message": "Old jQuery version detected. Likely vulnerable to XSS.",
    "suggestion": "Upgrade to latest jQuery version.",
    "owasp": "A06:2021-Vulnerable and Outdated Components",
    "cwe": "",
    "snippet": "const jqueryVer = \"jquery-1.12.4.min.js\";",
    "detected_by": "Regex"
  },
  {
    "id": "JS-XSS-001",
    "file": "samples/js/app3.js",
    "line": 10,
    "severity": "HIGH",
    "category": "Cross-Site Scripting",
    "message": "Possible DOM-based XSS via unsafe sink. | Potential DOM-based XSS vulnerability",
    "suggestion": "Use textContent instead of innerHTML; sanitize/encode inputs. | Use textContent or sanitize input (e.g. DOMPurify).",
    "owasp": "A03:2021-Injection",
    "cwe": "CWE-79",
    "snippet": "document.getElementById(\"demo\").innerHTML = window.location;*/",
    "detected_by": "Regex"
  },
  {
    "id": "JS-TIMEOUT-001",
    "file": "samples/js/app3.js",
    "line": 4,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "Passing strings to setTimeout/setInterval executes code like eval().",
    "suggestion": "Use function references instead of strings.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "setTimeout(\"alert('XSS')\", 1000);",
    "detected_by": "Regex"
  },
  {
    "id": "JS-LOCALSTORAGE-001",
    "file": "samples/js/app3.js",
    "line": 7,
    "severity": "MEDIUM",
    "category": "Sensitive Data Exposure",
    "message": "Sensitive data stored in browser storage | Storing sensitive data like passwords or tokens in localStorage is insecure.",
    "suggestion": "Do not store secrets in localStorage/sessionStorage. Use HttpOnly cookies. | Use secure HTTP-only cookies or encrypted storage mechanisms.",
    "owasp": "A02:2021 \u2013 Cryptographic Failures,A02:2021-Cryptographic Failures",
    "cwe": "CWE-922",
    "snippet": "localStorage.setItem(\"password\", \"12345\");",
    "detected_by": "Regex"
  },
  {
    "id": "JS-EVAL-TAINT-001",
    "file": "samples/js/app4.js",
    "line": 65,
    "severity": "CRITICAL",
    "category": "Code Injection",
    "message": "Use of eval() can lead to code injection. | eval() detected via AST; allows arbitrary code execution. | eval() with user input \u2192 Remote Code Execution.",
    "suggestion": "Avoid eval(); use JSON.parse or pre-defined function maps. | Avoid eval(); use JSON.parse or predefined safe alternatives. | Avoid eval(); use JSON.parse or safe parsers.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "eval(code); // SINK",
    "detected_by": "AST+Regex"
  },
  {
    "id": "JS-EVAL-TAINT-001",
    "file": "samples/js/app4.js",
    "line": 195,
    "severity": "CRITICAL",
    "category": "Code Injection",
    "message": "Use of eval() can lead to code injection. | eval() detected via AST; allows arbitrary code execution. | eval() with user input \u2192 Remote Code Execution.",
    "suggestion": "Avoid eval(); use JSON.parse or pre-defined function maps. | Avoid eval(); use JSON.parse or predefined safe alternatives. | Avoid eval(); use JSON.parse or safe parsers.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "eval(payload); // SINK",
    "detected_by": "AST+Regex"
  },
  {
    "id": "JS-XSS-001",
    "file": "samples/js/app4.js",
    "line": 45,
    "severity": "HIGH",
    "category": "Cross-Site Scripting",
    "message": "Possible DOM-based XSS via unsafe sink.",
    "suggestion": "Use textContent instead of innerHTML; sanitize/encode inputs.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "container.innerHTML = '<h3>Search:</h3>' + untrusted1; // SINK",
    "detected_by": "Regex"
  },
  {
    "id": "JS-XSS-001",
    "file": "samples/js/app4.js",
    "line": 208,
    "severity": "HIGH",
    "category": "Cross-Site Scripting",
    "message": "Possible DOM-based XSS via unsafe sink.",
    "suggestion": "Use textContent instead of innerHTML; sanitize/encode inputs.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "a.innerHTML = '<a href=\"' + u + '\">go</a>'; // SINK",
    "detected_by": "Regex"
  },
  {
    "id": "JS-WEAK-RNG-001",
    "file": "samples/js/app4.js",
    "line": 126,
    "severity": "MEDIUM",
    "category": "Weak Randomness",
    "message": "Weak randomness with Math.random()",
    "suggestion": "Use crypto.getRandomValues() instead.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "CWE-338",
    "snippet": "const token = Math.random().toString(36).slice(2); // SINK",
    "detected_by": "Regex"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 102,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "Console logging detected | setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Remove console statements in production. | Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection,A09:2021-Security Logging and Monitoring Failures",
    "cwe": "CWE-200",
    "snippet": "console.log('Fetched length (insecure):', (await res.text()).length);",
    "detected_by": "AST+Regex"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 127,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "Console logging detected | setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Remove console statements in production. | Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection,A09:2021-Security Logging and Monitoring Failures",
    "cwe": "CWE-200",
    "snippet": "console.log('Weak token:', token);",
    "detected_by": "AST+Regex"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 152,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "Console logging detected | setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Remove console statements in production. | Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection,A09:2021-Security Logging and Monitoring Failures",
    "cwe": "CWE-200",
    "snippet": "console.log('Polluted?', (check).pwned === true);",
    "detected_by": "AST+Regex"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 181,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "Console logging detected | setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Remove console statements in production. | Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection,A09:2021-Security Logging and Monitoring Failures",
    "cwe": "CWE-200",
    "snippet": "console.log('Testing user regex length=', pattern.length);",
    "detected_by": "AST+Regex"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 114,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "Sensitive data stored in browser storage | setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval(). | Sensitive data stored in localStorage/sessionStorage.",
    "suggestion": "Do not store secrets in localStorage/sessionStorage. Use HttpOnly cookies. | Pass a function reference instead of a string. | Pass a function reference instead of a string. | Use HttpOnly cookies or secure storage, not local/sessionStorage.",
    "owasp": "A02:2021-Cryptographic Failures,A03:2021-Injection",
    "cwe": "CWE-922",
    "snippet": "localStorage.setItem('authToken', t); // SINK",
    "detected_by": "AST+Regex"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 191,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "postMessage listener without origin validation | setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Always validate event.origin before handling messages. | Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection,A07:2021-Identification and Authentication Failures",
    "cwe": "CWE-346",
    "snippet": "window.addEventListener('message', (ev) => {",
    "detected_by": "AST+Regex"
  },
  {
    "id": "JS-NEWFUNC-AST-001",
    "file": "samples/js/app4.js",
    "line": 71,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "Function constructor detected; unsafe dynamic code execution.",
    "suggestion": "Avoid new Function(); refactor to safe static functions.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "const f = new Function('return (' + fnBody + ')'); // SINK",
    "detected_by": "AST"
  },
  {
    "id": "JS-SETTIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 77,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with string argument \u2192 code execution risk. | setTimeout() with user-controlled string \u2192 Code Execution. | setTimeout called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Use function references instead of strings. | Always pass function references, not strings. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "if (later) setTimeout(later, 50); // SINK (string form)",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 26,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "q: () => getParam('q'),",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 27,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "json: () => getParam('json'),",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 28,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "url: () => getParam('url'),",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 29,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "html: () => getParam('html'),",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 30,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "code: () => getParam('code'),",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 31,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "target: () => getParam('target'),",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 32,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "token: () => getParam('token'),",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 33,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "re: () => getParam('re'),",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 34,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "msg: () => getParam('msg')",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 41,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "const container = document.getElementById('out1') || document.body;",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 49,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval(). | Usage of insertAdjacentHTML with unsanitized input can lead to Cross-Site Scripting (XSS).",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string. | Sanitize HTML or avoid insertAdjacentHTML.",
    "owasp": "A03:2021 \u2013 Injection,A03:2021-Injection",
    "cwe": "",
    "snippet": "container.insertAdjacentHTML('beforeend', '<div class=\"result\">' + untrusted2 + '</div>'); // SINK",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 161,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string. | Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "const btn = document.getElementById('dangerBtn') || document.createElement('button');",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 166,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "btn.setAttribute('onclick', handler); // SINK",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 193,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "if (typeof ev.data === 'string' && ev.data.startsWith('RUN:')) {",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 207,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "const a = document.createElement('div');",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 219,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "const el = document.createElement('div');",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 220,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "el.setAttribute('style', v); // SINK",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 232,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "await fetch('/api/echo', { headers: { 'X-Note': msg } }); // SINK (potential splitting on some servers)",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 243,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "const c = document.getElementById('out2') || document.body;",
    "detected_by": "AST"
  },
  {
    "id": "JS-TIMEOUT-AST-001",
    "file": "samples/js/app4.js",
    "line": 254,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "setTimeout called with a string \u2192 dynamic code execution like eval(). | setInterval called with a string \u2192 dynamic code execution like eval().",
    "suggestion": "Pass a function reference instead of a string. | Pass a function reference instead of a string.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "const link = document.createElement('a');",
    "detected_by": "AST"
  },
  {
    "id": "PHP-SYSTEM-EXEC-001",
    "file": "samples/php/index.php",
    "line": 12,
    "severity": "HIGH",
    "category": "Command Execution",
    "message": "Command execution can lead to injection if args are tainted.",
    "suggestion": "Avoid shell execution; use built-in APIs and strict validation.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "if(isset($_GET['cmd'])){",
    "detected_by": "Regex"
  },
  {
    "id": "PHP-XSS-001",
    "file": "samples/php/index.php",
    "line": 8,
    "severity": "HIGH",
    "category": "Cross-Site Scripting",
    "message": "Echoing unescaped user input can cause XSS.",
    "suggestion": "Encode output with htmlspecialchars and validate inputs.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "echo $_GET['html']; // XSS",
    "detected_by": "Regex"
  },
  {
    "id": "PHP-CRYPTO-001",
    "file": "samples/php/index.php",
    "line": 10,
    "severity": "MEDIUM",
    "category": "Weak Cryptography",
    "message": "Weak hash algorithm used.",
    "suggestion": "Use password_hash (bcrypt/argon2) or sodium/openssl strong hashes.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "",
    "snippet": "$hash = md5($_GET['p']); // weak crypto",
    "detected_by": "Regex"
  },
  {
    "id": "PHP-ERROR-LEAK-001",
    "file": "samples/php/index.php",
    "line": 19,
    "severity": "LOW",
    "category": "Error Handling",
    "message": "Leaking raw errors or phpinfo() reveals sensitive info.",
    "suggestion": "Log errors server-side and show generic error messages.",
    "owasp": "A09:2021-Security Logging and Monitoring Failures",
    "cwe": "",
    "snippet": "var_dump($e); // error leak",
    "detected_by": "Regex"
  },
  {
    "id": "PHP-SYSTEM-AST-001",
    "file": "samples/php/index.php",
    "line": 13,
    "severity": "CRITICAL",
    "category": "Command Injection",
    "message": "system() detected in PHP AST; may allow command injection. | system() detected in PHP AST; may allow command injection. | system() called with user input \u2192 Command Injection. | system() called with user input \u2192 Command Injection. | system() called with user input \u2192 Command Injection.",
    "suggestion": "Avoid system(); use safer built-in APIs. | Avoid system(); use safer built-in APIs. | Avoid system(); use built-in APIs. | Avoid system(); use built-in APIs. | Avoid system(); use safer APIs or sanitize inputs.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "system(\"ls \" . $_GET['cmd']); // command injection",
    "detected_by": "AST"
  },
  {
    "id": "PHP-EVAL-001",
    "file": "samples/php/index2.php",
    "line": 4,
    "severity": "HIGH",
    "category": "Dangerous Function",
    "message": "Use of eval() can lead to code injection.",
    "suggestion": "Avoid eval(); use safer alternatives.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "eval($code); // \u274c Dangerous",
    "detected_by": "Regex"
  },
  {
    "id": "PHP-SYSTEM-EXEC-001",
    "file": "samples/php/index2.php",
    "line": 7,
    "severity": "HIGH",
    "category": "Command Execution",
    "message": "Command execution can lead to injection if args are tainted.",
    "suggestion": "Avoid shell execution; use built-in APIs and strict validation.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "$file = $_GET['file'];",
    "detected_by": "Regex"
  },
  {
    "id": "PHP-CRYPTO-001",
    "file": "samples/php/index2.php",
    "line": 18,
    "severity": "MEDIUM",
    "category": "Weak Cryptography",
    "message": "Weak hash algorithm used.",
    "suggestion": "Use password_hash (bcrypt/argon2) or sodium/openssl strong hashes.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "",
    "snippet": "$hash1 = md5($password);   // \u274c Weak hash",
    "detected_by": "Regex"
  },
  {
    "id": "PHP-CRYPTO-001",
    "file": "samples/php/index2.php",
    "line": 19,
    "severity": "MEDIUM",
    "category": "Weak Cryptography",
    "message": "Weak hash algorithm used.",
    "suggestion": "Use password_hash (bcrypt/argon2) or sodium/openssl strong hashes.",
    "owasp": "A02:2021-Cryptographic Failures",
    "cwe": "",
    "snippet": "$hash2 = sha1($password);  // \u274c Weak hash",
    "detected_by": "Regex"
  },
  {
    "id": "PHP-MYSQLI-TAINT-001",
    "file": "samples/php/index2.php",
    "line": 14,
    "severity": "CRITICAL",
    "category": "SQL Injection",
    "message": "Use of mysqli_query with untrusted input may lead to SQL Injection. | mysqli_query() with user input \u2192 SQL Injection. | mysqli_query called with user input \u2192 SQL Injection.",
    "suggestion": "Always use prepared statements (mysqli_stmt or PDO). | Always use prepared statements (mysqli_stmt or PDO). | Always use prepared statements (mysqli_stmt or PDO).",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "$result = mysqli_query($conn, $query);",
    "detected_by": "AST+Regex"
  },
  {
    "id": "PHP-INCLUDE-001",
    "file": "samples/php/index2.php",
    "line": 22,
    "severity": "HIGH",
    "category": "File Inclusion",
    "message": "Dynamic include/require detected. May allow LFI/RFI.",
    "suggestion": "Never include user input in include/require paths. Use whitelists.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "",
    "snippet": "$page = $_GET['page'];",
    "detected_by": "Regex"
  },
  {
    "id": "PHP-MOVE-UPLOAD-TAINT-001",
    "file": "samples/php/index2.php",
    "line": 38,
    "severity": "CRITICAL",
    "category": "Insecure File Upload",
    "message": "File upload without validation detected. | move_uploaded_file() without validation allows arbitrary file upload.",
    "suggestion": "Validate file type, size, extension; randomize name; store outside web root. | Validate file type, size, and use randomized safe paths.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "",
    "snippet": "move_uploaded_file($_FILES['file']['tmp_name'], \"uploads/\" . $_FILES['file']['name']); // \u274c No checks",
    "detected_by": "AST+Regex"
  },
  {
    "id": "PHP-SYSTEM-AST-001",
    "file": "samples/php/index2.php",
    "line": 8,
    "severity": "CRITICAL",
    "category": "Command Injection",
    "message": "system() detected in PHP AST; may allow command injection. | system() detected in PHP AST; may allow command injection. | system() called with user input \u2192 Command Injection. | system() called with user input \u2192 Command Injection. | system() called with user input \u2192 Command Injection.",
    "suggestion": "Avoid system(); use safer built-in APIs. | Avoid system(); use safer built-in APIs. | Avoid system(); use built-in APIs. | Avoid system(); use built-in APIs. | Avoid system(); use safer APIs or sanitize inputs.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "system(\"cat \" . $file); // \u274c Dangerous",
    "detected_by": "AST"
  },
  {
    "id": "PHP-INCLUDE-AST-001",
    "file": "samples/php/index2.php",
    "line": 23,
    "severity": "HIGH",
    "category": "File Inclusion",
    "message": "Dynamic include/require detected. | Dynamic include/require with user input \u2192 LFI/RFI.",
    "suggestion": "Never use user input in include/require paths. Use whitelists. | Never include user input in file paths; use whitelisted constants.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "",
    "snippet": "include($page . \".php\"); // \u274c Insecure include",
    "detected_by": "AST"
  },
  {
    "id": "PHP-FILE-READ-001",
    "file": "samples/php/index3.php",
    "line": 27,
    "severity": "HIGH",
    "category": "Path Traversal",
    "message": "file_get_contents on user input may allow path traversal / arbitrary file read. | Potential SSRF: fetching external URL without validation. | file_get_contents called with user input \u2192 Path Traversal.",
    "suggestion": "Avoid using unvalidated input in file_get_contents. | Validate and whitelist remote URLs before requesting. | Never pass unvalidated input to file_get_contents.",
    "owasp": "A05:2021-Security Misconfiguration,A10:2021-SSRF",
    "cwe": "",
    "snippet": "$response = file_get_contents(\"http://\" . $url);",
    "detected_by": "AST+Regex"
  },
  {
    "id": "PHP-FILE-READ-001",
    "file": "samples/php/index3.php",
    "line": 34,
    "severity": "HIGH",
    "category": "Path Traversal",
    "message": "file_get_contents on user input may allow path traversal / arbitrary file read. | file_get_contents called with user input \u2192 Path Traversal.",
    "suggestion": "Avoid using unvalidated input in file_get_contents. | Never pass unvalidated input to file_get_contents.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "",
    "snippet": "$data = file_get_contents($filename);",
    "detected_by": "AST+Regex"
  },
  {
    "id": "PHP-AUTH-CHECK-001",
    "file": "samples/php/index3.php",
    "line": 6,
    "severity": "HIGH",
    "category": "Broken Access Control",
    "message": "Access control decision appears to be based on user input.",
    "suggestion": "Enforce server-side authorization using session or token checks.",
    "owasp": "A01:2021-Broken Access Control",
    "cwe": "",
    "snippet": "if ($_GET['role'] === 'admin') {",
    "detected_by": "Regex"
  },
  {
    "id": "PHP-HARDCODED-SECRET-002",
    "file": "samples/php/index3.php",
    "line": 14,
    "severity": "HIGH",
    "category": "Insecure Design",
    "message": "Hardcoded secret or token detected.",
    "suggestion": "Use environment variables or a secrets manager.",
    "owasp": "A04:2021-Insecure Design",
    "cwe": "",
    "snippet": "$secret = \"mySuperSecretApiKey123\";",
    "detected_by": "Regex"
  },
  {
    "id": "PHP-OUTDATED-MYSQL-001",
    "file": "samples/php/index3.php",
    "line": 20,
    "severity": "HIGH",
    "category": "Outdated Components",
    "message": "Use of deprecated mysql_connect() detected.",
    "suggestion": "Migrate to PDO or mysqli with prepared statements.",
    "owasp": "A06:2021-Vulnerable and Outdated Components",
    "cwe": "",
    "snippet": "$conn = mysql_connect(\"localhost\", \"root\", \"password\");",
    "detected_by": "Regex"
  },
  {
    "id": "PHP-SYSTEM-EXEC-001",
    "file": "samples/php/index4.php",
    "line": 6,
    "severity": "HIGH",
    "category": "Command Execution",
    "message": "Command execution can lead to injection if args are tainted. | preg_replace with /e modifier can execute code. | preg_replace with /e modifier executes code \u2192 RCE risk.",
    "suggestion": "Avoid shell execution; use built-in APIs and strict validation. | Do not use /e; use preg_replace_callback instead. | Use preg_replace_callback instead of /e.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "echo preg_replace(\"/.*/e\", \"system('ls')\", $input);",
    "detected_by": "AST+Regex"
  },
  {
    "id": "PHP-INCLUDE-001",
    "file": "samples/php/index4.php",
    "line": 13,
    "severity": "HIGH",
    "category": "File Inclusion",
    "message": "Dynamic include/require detected. May allow LFI/RFI.",
    "suggestion": "Never include user input in include/require paths. Use whitelists.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "",
    "snippet": "$file = $_GET['page'];",
    "detected_by": "Regex"
  },
  {
    "id": "PHP-UNSERIALIZE-AST-001",
    "file": "samples/php/index4.php",
    "line": 10,
    "severity": "CRITICAL",
    "category": "Insecure Deserialization",
    "message": "Unserialize on untrusted input detected. | unserialize() on user input \u2192 Insecure Deserialization. | unserialize() on user input \u2192 Insecure Deserialization. | unserialize() called in AST. Dangerous with untrusted input. | unserialize() called in AST. Dangerous with untrusted input. | unserialize() on user input \u2192 Insecure Deserialization.",
    "suggestion": "Avoid unserialize(); use JSON instead, or validate strictly. | Do not unserialize untrusted input. Use JSON. | Do not unserialize untrusted input. Use JSON. | Avoid unserialize(); prefer JSON or validate inputs. | Avoid unserialize(); prefer JSON or validate inputs. | Do not unserialize untrusted input. Use JSON instead.",
    "owasp": "A08:2021-Software and Data Integrity Failures",
    "cwe": "",
    "snippet": "$obj = unserialize($data);",
    "detected_by": "AST+Regex"
  },
  {
    "id": "PHP-INCLUDE-AST-001",
    "file": "samples/php/index4.php",
    "line": 14,
    "severity": "HIGH",
    "category": "File Inclusion",
    "message": "Dynamic include/require detected. | Dynamic include/require with user input \u2192 LFI/RFI.",
    "suggestion": "Never use user input in include/require paths. Use whitelists. | Never include user input in file paths; use whitelisted constants.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "",
    "snippet": "include($file);",
    "detected_by": "AST"
  },
  {
    "id": "PHP-SYSTEM-EXEC-001",
    "file": "samples/php/index5.php",
    "line": 22,
    "severity": "HIGH",
    "category": "Command Execution",
    "message": "Command execution can lead to injection if args are tainted.",
    "suggestion": "Avoid shell execution; use built-in APIs and strict validation.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "if (isset($_GET['cmd'])) {",
    "detected_by": "Regex"
  },
  {
    "id": "PHP-INCLUDE-001",
    "file": "samples/php/index5.php",
    "line": 27,
    "severity": "HIGH",
    "category": "File Inclusion",
    "message": "Dynamic include/require detected. May allow LFI/RFI.",
    "suggestion": "Never include user input in include/require paths. Use whitelists.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "",
    "snippet": "if (isset($_GET['page'])) {",
    "detected_by": "Regex"
  },
  {
    "id": "PHP-SYSTEM-AST-001",
    "file": "samples/php/index5.php",
    "line": 23,
    "severity": "CRITICAL",
    "category": "Command Injection",
    "message": "system() detected in PHP AST; may allow command injection. | system() detected in PHP AST; may allow command injection. | system() called with user input \u2192 Command Injection. | system() called with user input \u2192 Command Injection. | system() called with user input \u2192 Command Injection.",
    "suggestion": "Avoid system(); use safer built-in APIs. | Avoid system(); use safer built-in APIs. | Avoid system(); use built-in APIs. | Avoid system(); use built-in APIs. | Avoid system(); use safer APIs or sanitize inputs.",
    "owasp": "A03:2021-Injection",
    "cwe": "",
    "snippet": "system($_GET['cmd']);",
    "detected_by": "AST"
  },
  {
    "id": "PHP-INCLUDE-AST-001",
    "file": "samples/php/index5.php",
    "line": 28,
    "severity": "HIGH",
    "category": "File Inclusion",
    "message": "Dynamic include/require detected. | Dynamic include/require with user input \u2192 LFI/RFI.",
    "suggestion": "Never use user input in include/require paths. Use whitelists. | Never include user input in file paths; use whitelisted constants.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "",
    "snippet": "include($_GET['page']);",
    "detected_by": "AST"
  },
  {
    "id": "PHP-FILE-READ-001",
    "file": "samples/php/index6.php",
    "line": 7,
    "severity": "HIGH",
    "category": "Path Traversal",
    "message": "file_get_contents on user input may allow path traversal / arbitrary file read. | file_get_contents called with user input \u2192 Path Traversal.",
    "suggestion": "Avoid using unvalidated input in file_get_contents. | Never pass unvalidated input to file_get_contents.",
    "owasp": "A05:2021-Security Misconfiguration",
    "cwe": "",
    "snippet": "$code = file_get_contents($argv[1] ?? \"test.php\");",
    "detected_by": "AST+Regex"
  }
]