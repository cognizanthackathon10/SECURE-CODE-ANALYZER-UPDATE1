file,line,severity,category,id,message,snippet,suggestion,owasp,cwe,detected_by
samples/js\app.js,17,CRITICAL,Code Injection,JS-EVAL-TAINT-001,Use of eval() can lead to code injection; | eval() detected via AST; allows arbitrary code execution; | eval() with user input → Remote Code Execution,eval(req.query.code); // code injection,Avoid eval(); use JSON; parse or pre-defined function maps; | Avoid eval(); parse or predefined safe alternatives; parse or safe parsers,A03:2021-Injection,,AST+Regex
samples/js\app.js,12,CRITICAL,code-execution,js-child-process-exec,Use of exec may allow command injection if input is not sanitized; | Use of child_process; exec() with user input may allow remote command execution,child_process.exec('ls ' + req.query.dir); // command injection,Use safer spawn with arg arrays; validate/whitelist inputs; | Use safer alternatives like execFile with strict input validation,"A03:2021 – Injection,A03:2021-Injection",,Regex
samples/js\app.js,28,HIGH,Cross-Site Scripting,JS-XSS-001,Possible DOM-based XSS via unsafe sink,document.body.innerHTML = req.query.html; // XSS in client-side route (demo),Use textContent instead of innerHTML; sanitize/encode inputs,A03:2021-Injection,,Regex
samples/js\app.js,7,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,Weak hash algorithm used; | setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),const h = crypto.createHash('md5').update(req.query.q || 'x').digest('hex');,Use SHA-256/512 or password hashing like bcrypt/argon2; | Pass a function reference instead of a string,"A02:2021-Cryptographic Failures,A03:2021-Injection",,AST+Regex
samples/js\app.js,1,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),const express = require('express');,Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app.js,3,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),const crypto = require('crypto');,Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app.js,4,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),const child_process = require('child_process');,Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app.js,6,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"app.get('/hash', (req, res) => {",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app.js,11,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"app.get('/run', (req, res) => {",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app.js,13,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"res.send(""ok"");",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app.js,16,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"app.get('/eval', (req, res) => {",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app.js,18,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"res.send(""done"");",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app.js,21,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"app.get('/search', (req, res) => {",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app.js,24,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"res.send(""searching"");",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app.js,27,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"app.get('/xss', (req, res) => {",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app.js,29,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"res.send(""done"");",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app2.js,6,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,Console logging detected | setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"console.log(""Admin section visible!""); // BAD: client-side auth check",Remove console statements in production; | Pass a function reference instead of a string,"A03:2021-Injection,A09:2021-Security Logging and Monitoring Failures",CWE-200,AST+Regex
samples/js\app2.js,32,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,Console logging detected | setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"console.log(""Debug: reached end of app2.js"");",Remove console statements in production; | Pass a function reference instead of a string,"A03:2021-Injection,A09:2021-Security Logging and Monitoring Failures",CWE-200,AST+Regex
samples/js\app2.js,5,MEDIUM,Broken Access Control,JS-CLIENT-AUTH-001,Authorization logic found in client-side code; This can be bypassed,"if (user.role === ""admin"") {",Do not rely on client-side authorization checks,A01:2021-Broken Access Control,,Regex
samples/js\app2.js,13,HIGH,Insecure Design,JS-DISABLE-CSP-001,CSP with unsafe-inline detected; This weakens XSS protection,"const cspHeader = ""Content-Security-Policy: default-src 'self' 'unsafe-inline'"";",Avoid unsafe-inline; use nonces or hashes in CSP,A04:2021-Insecure Design,,Regex
samples/js\app2.js,19,MEDIUM,Outdated Components,JS-JQUERY-OLD-001,Old jQuery version detected; Likely vulnerable to XSS,"const jqueryVer = ""jquery-1.12.4.min.js"";",Upgrade to latest jQuery version,A06:2021-Vulnerable and Outdated Components,,Regex
samples/js\app2.js,25,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"const userUrl = ""http://"" + window.location.search.replace(""?url="", """");",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app3.js,10,HIGH,Cross-Site Scripting,JS-XSS-001,Possible DOM-based XSS via unsafe sink; | Potential DOM-based XSS vulnerability | setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"document.getElementById(""demo"").innerHTML = window.location;",Use textContent instead of innerHTML; sanitize/encode inputs; | Use textContent or sanitize input (e; g; DOMPurify); | Pass a function reference instead of a string,A03:2021-Injection,CWE-79,AST+Regex
samples/js\app3.js,4,HIGH,Dangerous Function,JS-TIMEOUT-001,Passing strings to setTimeout/setInterval executes code like eval(); | setTimeout called with string argument → code execution risk; | setTimeout() with user-controlled string → Code Execution; | setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"setTimeout(""alert('XSS')"", 1000);","Use function references instead of strings; | Use function references instead of strings; | Always pass function references, not strings; | Pass a function reference instead of a string",A03:2021-Injection,,AST+Regex
samples/js\app3.js,7,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,Sensitive data stored in browser storage | Storing sensitive data like passwords or tokens in localStorage is insecure; | setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(); | Sensitive data stored in localStorage/sessionStorage,"localStorage.setItem(""password"", ""12345"");","Do not store secrets in localStorage/sessionStorage; Use HttpOnly cookies; | Use secure HTTP-only cookies or encrypted storage mechanisms; | Pass a function reference instead of a string; | Use HttpOnly cookies or secure storage, not local/sessionStorage","A02:2021 – Cryptographic Failures,A02:2021-Cryptographic Failures,A03:2021-Injection",CWE-922,AST+Regex
samples/js\app4.js,64,CRITICAL,Code Injection,JS-EVAL-TAINT-001,Use of eval() can lead to code injection; | eval() detected via AST; allows arbitrary code execution; | eval() with user input → Remote Code Execution,eval(code); // SINK,Avoid eval(); use JSON; parse or pre-defined function maps; | Avoid eval(); parse or predefined safe alternatives; parse or safe parsers,A03:2021-Injection,,AST+Regex
samples/js\app4.js,194,CRITICAL,Code Injection,JS-EVAL-TAINT-001,Use of eval() can lead to code injection; | eval() detected via AST; allows arbitrary code execution; | eval() with user input → Remote Code Execution,eval(payload); // SINK,Avoid eval(); use JSON; parse or pre-defined function maps; | Avoid eval(); parse or predefined safe alternatives; parse or safe parsers,A03:2021-Injection,,AST+Regex
samples/js\app4.js,44,HIGH,Cross-Site Scripting,JS-XSS-001,Possible DOM-based XSS via unsafe sink,container.innerHTML = '<h3>Search:</h3>' + untrusted1; // SINK,Use textContent instead of innerHTML; sanitize/encode inputs,A03:2021-Injection,,Regex
samples/js\app4.js,207,HIGH,Cross-Site Scripting,JS-XSS-001,Possible DOM-based XSS via unsafe sink,"a.innerHTML = '<a href=""' + u + '"">go</a>'; // SINK",Use textContent instead of innerHTML; sanitize/encode inputs,A03:2021-Injection,,Regex
samples/js\app4.js,125,MEDIUM,Weak Randomness,JS-WEAK-RNG-001,Weak randomness with Math; random(),const token = Math.random().toString(36).slice(2); // SINK,Use crypto; getRandomValues() instead,A02:2021-Cryptographic Failures,CWE-338,Regex
samples/js\app4.js,101,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,Console logging detected | setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"console.log('Fetched length (insecure):', (await res.text()).length);",Remove console statements in production; | Pass a function reference instead of a string,"A03:2021-Injection,A09:2021-Security Logging and Monitoring Failures",CWE-200,AST+Regex
samples/js\app4.js,126,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,Console logging detected | setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"console.log('Weak token:', token);",Remove console statements in production; | Pass a function reference instead of a string,"A03:2021-Injection,A09:2021-Security Logging and Monitoring Failures",CWE-200,AST+Regex
samples/js\app4.js,151,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,Console logging detected | setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"console.log('Polluted?', (check).pwned === true);",Remove console statements in production; | Pass a function reference instead of a string,"A03:2021-Injection,A09:2021-Security Logging and Monitoring Failures",CWE-200,AST+Regex
samples/js\app4.js,180,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,Console logging detected | setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"console.log('Testing user regex length=', pattern.length);",Remove console statements in production; | Pass a function reference instead of a string,"A03:2021-Injection,A09:2021-Security Logging and Monitoring Failures",CWE-200,AST+Regex
samples/js\app4.js,113,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,Sensitive data stored in browser storage | setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(); | Sensitive data stored in localStorage/sessionStorage,"localStorage.setItem('authToken', t); // SINK","Do not store secrets in localStorage/sessionStorage; Use HttpOnly cookies; | Pass a function reference instead of a string; | Use HttpOnly cookies or secure storage, not local/sessionStorage","A02:2021-Cryptographic Failures,A03:2021-Injection",CWE-922,AST+Regex
samples/js\app4.js,190,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,postMessage listener without origin validation | setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"window.addEventListener('message', (ev) => {",Always validate event; origin before handling messages; | Pass a function reference instead of a string,"A03:2021-Injection,A07:2021-Identification and Authentication Failures",CWE-346,AST+Regex
samples/js\app4.js,70,HIGH,Dangerous Function,JS-NEWFUNC-AST-001,Function constructor detected; unsafe dynamic code execution,const f = new Function('return (' + fnBody + ')'); // SINK,Avoid new Function(); refactor to safe static functions,A03:2021-Injection,,AST
samples/js\app4.js,76,HIGH,Dangerous Function,JS-SETTIMEOUT-AST-001,setTimeout called with string argument → code execution risk; | setTimeout() with user-controlled string → Code Execution; | setTimeout called with a string → dynamic code execution like eval(),"if (later) setTimeout(later, 50); // SINK (string form)","Use function references instead of strings; | Always pass function references, not strings; | Pass a function reference instead of a string",A03:2021-Injection,,AST
samples/js\app4.js,25,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"q: () => getParam('q'),",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,26,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"json: () => getParam('json'),",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,27,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"url: () => getParam('url'),",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,28,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"html: () => getParam('html'),",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,29,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"code: () => getParam('code'),",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,30,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"target: () => getParam('target'),",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,31,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"token: () => getParam('token'),",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,32,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"re: () => getParam('re'),",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,33,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),msg: () => getParam('msg'),Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,40,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),const container = document.getElementById('out1') || document.body;,Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,48,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(); | Usage of insertAdjacentHTML with unsanitized input can lead to Cross-Site Scripting (XSS),"container.insertAdjacentHTML('beforeend', '<div class=""result"">' + untrusted2 + '</div>'); // SINK",Pass a function reference instead of a string; | Pass a function reference instead of a string; | Sanitize HTML or avoid insertAdjacentHTML,"A03:2021 – Injection,A03:2021-Injection",,AST
samples/js\app4.js,160,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),const btn = document.getElementById('dangerBtn') || document.createElement('button');,Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,165,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"btn.setAttribute('onclick', handler); // SINK",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,192,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),if (typeof ev.data === 'string' && ev.data.startsWith('RUN:')) {,Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,206,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),const a = document.createElement('div');,Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,218,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),const el = document.createElement('div');,Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,219,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"el.setAttribute('style', v); // SINK",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,231,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),"await fetch('/api/echo', { headers: { 'X-Note': msg } }); // SINK (potential splitting on some servers)",Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,242,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),const c = document.getElementById('out2') || document.body;,Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/js\app4.js,253,HIGH,Dangerous Function,JS-TIMEOUT-AST-001,setTimeout called with a string → dynamic code execution like eval(); | setInterval called with a string → dynamic code execution like eval(),const link = document.createElement('a');,Pass a function reference instead of a string; | Pass a function reference instead of a string,A03:2021-Injection,,AST
samples/php\index.php,12,HIGH,Command Execution,PHP-SYSTEM-EXEC-001,Command execution can lead to injection if args are tainted,if(isset($_GET['cmd'])){,Avoid shell execution; use built-in APIs and strict validation,A03:2021-Injection,,Regex
samples/php\index.php,8,HIGH,Cross-Site Scripting,PHP-XSS-001,Echoing unescaped user input can cause XSS,echo $_GET['html']; // XSS,Encode output with htmlspecialchars and validate inputs,A03:2021-Injection,,Regex
samples/php\index.php,10,MEDIUM,Weak Cryptography,PHP-CRYPTO-001,Weak hash algorithm used,$hash = md5($_GET['p']); // weak crypto,Use password_hash (bcrypt/argon2) or sodium/openssl strong hashes,A02:2021-Cryptographic Failures,,Regex
samples/php\index.php,19,LOW,Error Handling,PHP-ERROR-LEAK-001,Leaking raw errors or phpinfo() reveals sensitive info,var_dump($e); // error leak,Log errors server-side and show generic error messages,A09:2021-Security Logging and Monitoring Failures,,Regex
samples/php\index.php,13,CRITICAL,Command Injection,PHP-SYSTEM-AST-001,system() detected in PHP AST; may allow command injection; | system() detected in PHP AST; | system() called with user input → Command Injection,"system(""ls "" . $_GET['cmd']); // command injection",Avoid system(); use safer built-in APIs; | Avoid system(); use built-in APIs; use safer APIs or sanitize inputs,A03:2021-Injection,,AST
samples/php\index2.php,4,HIGH,Dangerous Function,PHP-EVAL-001,Use of eval() can lead to code injection,eval($code); // ❌ Dangerous,Avoid eval(); use safer alternatives,A03:2021-Injection,,Regex
samples/php\index2.php,7,HIGH,Command Execution,PHP-SYSTEM-EXEC-001,Command execution can lead to injection if args are tainted,$file = $_GET['file'];,Avoid shell execution; use built-in APIs and strict validation,A03:2021-Injection,,Regex
samples/php\index2.php,18,MEDIUM,Weak Cryptography,PHP-CRYPTO-001,Weak hash algorithm used,$hash1 = md5($password);   // ❌ Weak hash,Use password_hash (bcrypt/argon2) or sodium/openssl strong hashes,A02:2021-Cryptographic Failures,,Regex
samples/php\index2.php,19,MEDIUM,Weak Cryptography,PHP-CRYPTO-001,Weak hash algorithm used,$hash2 = sha1($password);  // ❌ Weak hash,Use password_hash (bcrypt/argon2) or sodium/openssl strong hashes,A02:2021-Cryptographic Failures,,Regex
samples/php\index2.php,14,CRITICAL,SQL Injection,PHP-MYSQLI-TAINT-001,Use of mysqli_query with untrusted input may lead to SQL Injection; | mysqli_query() with user input → SQL Injection; | mysqli_query called with user input → SQL Injection,"$result = mysqli_query($conn, $query);",Always use prepared statements (mysqli_stmt or PDO); | Always use prepared statements (mysqli_stmt or PDO),A03:2021-Injection,,AST+Regex
samples/php\index2.php,22,HIGH,File Inclusion,PHP-INCLUDE-001,Dynamic include/require detected; May allow LFI/RFI,$page = $_GET['page'];,Never include user input in include/require paths; Use whitelists,A05:2021-Security Misconfiguration,,Regex
samples/php\index2.php,38,CRITICAL,Insecure File Upload,PHP-MOVE-UPLOAD-TAINT-001,File upload without validation detected; | move_uploaded_file() without validation allows arbitrary file upload,"move_uploaded_file($_FILES['file']['tmp_name'], ""uploads/"" . $_FILES['file']['name']); // ❌ No checks","Validate file type, size, extension; randomize name; store outside web root; | Validate file type, size, and use randomized safe paths",A05:2021-Security Misconfiguration,,AST+Regex
samples/php\index2.php,8,CRITICAL,Command Injection,PHP-SYSTEM-AST-001,system() detected in PHP AST; may allow command injection; | system() detected in PHP AST; | system() called with user input → Command Injection,"system(""cat "" . $file); // ❌ Dangerous",Avoid system(); use safer built-in APIs; | Avoid system(); use built-in APIs; use safer APIs or sanitize inputs,A03:2021-Injection,,AST
samples/php\index2.php,23,HIGH,File Inclusion,PHP-INCLUDE-AST-001,Dynamic include/require detected; | Dynamic include/require with user input → LFI/RFI,"include($page . "".php""); // ❌ Insecure include",Never use user input in include/require paths; Use whitelists; | Never include user input in file paths; use whitelisted constants,A05:2021-Security Misconfiguration,,AST
samples/php\index3.php,27,HIGH,Path Traversal,PHP-FILE-READ-001,file_get_contents on user input may allow path traversal / arbitrary file read; | Potential SSRF: fetching external URL without validation; | file_get_contents called with user input → Path Traversal,"$response = file_get_contents(""http://"" . $url);",Avoid using unvalidated input in file_get_contents; | Validate and whitelist remote URLs before requesting; | Never pass unvalidated input to file_get_contents,"A05:2021-Security Misconfiguration,A10:2021-SSRF",,AST+Regex
samples/php\index3.php,34,HIGH,Path Traversal,PHP-FILE-READ-001,file_get_contents on user input may allow path traversal / arbitrary file read; | file_get_contents called with user input → Path Traversal,$data = file_get_contents($filename);,Avoid using unvalidated input in file_get_contents; | Never pass unvalidated input to file_get_contents,A05:2021-Security Misconfiguration,,AST+Regex
samples/php\index3.php,6,HIGH,Broken Access Control,PHP-AUTH-CHECK-001,Access control decision appears to be based on user input,if ($_GET['role'] === 'admin') {,Enforce server-side authorization using session or token checks,A01:2021-Broken Access Control,,Regex
samples/php\index3.php,14,HIGH,Insecure Design,PHP-HARDCODED-SECRET-002,Hardcoded secret or token detected,"$secret = ""mySuperSecretApiKey123"";",Use environment variables or a secrets manager,A04:2021-Insecure Design,,Regex
samples/php\index3.php,20,HIGH,Outdated Components,PHP-OUTDATED-MYSQL-001,Use of deprecated mysql_connect() detected,"$conn = mysql_connect(""localhost"", ""root"", ""password"");",Migrate to PDO or mysqli with prepared statements,A06:2021-Vulnerable and Outdated Components,,Regex
samples/php\index4.php,6,HIGH,Command Execution,PHP-SYSTEM-EXEC-001,Command execution can lead to injection if args are tainted; | preg_replace with /e modifier can execute code; | preg_replace with /e modifier executes code → RCE risk,"echo preg_replace(""/.*/e"", ""system('ls')"", $input);",Avoid shell execution; use built-in APIs and strict validation; | Do not use /e; use preg_replace_callback instead; | Use preg_replace_callback instead of /e,A03:2021-Injection,,AST+Regex
samples/php\index4.php,13,HIGH,File Inclusion,PHP-INCLUDE-001,Dynamic include/require detected; May allow LFI/RFI,$file = $_GET['page'];,Never include user input in include/require paths; Use whitelists,A05:2021-Security Misconfiguration,,Regex
samples/php\index4.php,10,CRITICAL,Insecure Deserialization,PHP-UNSERIALIZE-AST-001,Unserialize on untrusted input detected; | unserialize() on user input → Insecure Deserialization; | unserialize() called in AST; Dangerous with untrusted input,$obj = unserialize($data);,"Avoid unserialize(); use JSON instead, or validate strictly; | Do not unserialize untrusted input; Use JSON; | Avoid unserialize(); prefer JSON or validate inputs; Use JSON instead",A08:2021-Software and Data Integrity Failures,,AST+Regex
samples/php\index4.php,14,HIGH,File Inclusion,PHP-INCLUDE-AST-001,Dynamic include/require detected; | Dynamic include/require with user input → LFI/RFI,include($file);,Never use user input in include/require paths; Use whitelists; | Never include user input in file paths; use whitelisted constants,A05:2021-Security Misconfiguration,,AST
